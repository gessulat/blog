[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Resume\nGoogle Scholar Profile"
  },
  {
    "objectID": "posts/tufte_rangeplot/tufte_rangeplot.html",
    "href": "posts/tufte_rangeplot/tufte_rangeplot.html",
    "title": "Rangeplot in Altair",
    "section": "",
    "text": "Edward Tufte suggests to visually indicate the location of the max and min values in a scatterplot with the lines that demark the x- and y-axis of the plot. He calls this a rangeplot. This post shows how to create a such a plot in Altair 5.\nFirst, we create a random dataset.\n\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'x': np.random.randn(100),\n    'y': np.random.randn(100),\n    'category': np.random.randint(0, 2, 100),\n})\n\nThen, we create a scatterplot and adjust the axes as recommended by Tufte. We remove grids and ticks, as is common in Tufte-style plots. As Altair’s default font size is rather small, we increase it.\n\nimport altair as alt\n\nalt.Chart(df, title=\"Rangeplot\").mark_point(filled=True).encode(\n    alt.X('x',\n      axis=alt.Axis(\n          offset=40, \n          grid=False, \n          ticks=False, \n          labelFontSize=12,\n          titleFontSize=16\n      ),\n      scale=alt.Scale(domain=[df.x.min(), df.x.max()], nice=False)\n    ),\n    alt.Y('y',\n      axis=alt.Axis(\n          offset=40, \n          grid=False, \n          ticks=False, \n          labelFontSize=12,\n          titleFontSize=16\n      ),\n      scale=alt.Scale(domain=[df.y.min(), df.y.max()], nice=False)\n    ),\n    color=alt.Color('category:N')\n).configure_view(\n    stroke=None,\n)\n\n\n\n\n\n\n\nThis was quite some styling for a single plot. To simplify this in the future, we can make our lives easier by\n\nFactoring out the min_max_scale.\nCreating a custom theme following Tufte’s advice on style. In addition we’ll use a font is similar to fonts he regularly uses.\n\n\n\nfrom altair import theme\n\n@theme.register('tufte', enable=True)\ndef tufte():\n    font = \"Georgia\"\n    return {\n        'config': {\n            \"title\": {\n                'font': font,\n                'fontSize': 24\n            },\n            \"background\": None,\n            'view': {\n                'stroke': None,\n                'height': 300,\n                'width': 400,\n            },\n            'mark': {'filled': True,},\n            'axis': {\n                'labelFontSize': 14,\n                'titleFontSize': 18,\n                'offset': 40,\n                'grid': False,\n                'ticks': False,\n                'labelFont': font,\n                'titleFont': font\n            },\n            'legend': { \n                'titleFont': font,\n                'labelFont': font,\n                'titleFontSize': 14,\n                'labelFontSize': 12\n            },\n            'scale': {\n                'nice': False\n            }\n        }\n    }\n\n\nmin_max_scale = lambda df, col: Scale(domain=[df[col].min(), df[col].max()])\n\nfrom altair import Chart, X, Y, Color, Scale, theme\n\nChart(df, title=\"Rangeplot\").mark_point().encode(\n    X('x', scale=min_max_scale(df, 'x')),\n    Y('y', scale=min_max_scale(df, 'y')),\n    color=Color('category:N'),\n)"
  },
  {
    "objectID": "posts/tufte_sidenote.html",
    "href": "posts/tufte_sidenote.html",
    "title": "Sidenotes for Quarto",
    "section": "",
    "text": "In his books Edward Tufte heavily annotates his text with sidenotes at the margin. I enjoy this style of writing very much. Markdown and Quarto don’t have a native way to support sidenotes, so let’s try to implement it!\nFastHTML is a new Python library from Answer.AI that makes it easy to generate blocks of HTML. Below is an example that builds a group of html tags that match well to Tufte CSS by Dave Liepmann.\n\nfrom fasthtml.common import Label, Input, Span, FT\nfrom fasthtml.common import *\n\ndef sidenote(ct, _id=None):\n    _id = _id or f\"sn{str(hash(str(ct)))[:6]}\"\n    c = (\n        Label(cls='margin-toggle sidenote-number', **{'for': _id}),\n        Input(type='checkbox', id=_id, cls='margin-toggle'),\n        Span(*ct, cls='sidenote')\n    )\n    return \"\".join(x.__html__() for x in c)\n\nprint(sidenote('i am a sidenote'))\n\n&lt;label for=\"sn-36715\" class=\"margin-toggle sidenote-number\"&gt;&lt;/label&gt;&lt;input type=\"checkbox\" id=\"sn-36715\" class=\"margin-toggle\" name=\"sn-36715\"&gt;\n&lt;span class=\"sidenote\"&gt;i am a sidenote&lt;/span&gt;\n\n\nHow can we use this function now inside our Markdown blog? Quarto can render functions but the way Claude recommended was not particularly convenient. What we can do instead is to generate a full html string and output that asis - this will be rendered nicely by Quarto. We need to prepend the code cell that uses this with the following so that Quarto understands what we want.\n#| echo: true\n#| output: asis\n\ndef html(md):\n    _html = \"{=html}\"\n    print(f\"\"\"```{_html}\\n{md}```\"\"\")\n\nhtml(f\"\"\"\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \nExcepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nThis is a second test for a sidenote.{sidenote('I am the postman! I am the walrus! I am the sidenote! Ta da da da.')}\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, \nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \nExcepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\"\"\")\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \nExcepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum\n\nThis is a second test for a sidenote.\nI am the postman! I am the walrus! I am the sidenote! Ta da da da.\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, \nsed do eiusmod tempor incididunt ut labore et dolore magna aliqua. \nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. \nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. \nExcepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum"
  },
  {
    "objectID": "posts/daylight_hours.html",
    "href": "posts/daylight_hours.html",
    "title": "Daylight hours",
    "section": "",
    "text": "Berlin can be quite ugly, particularly in Winter when it’s dark and there are less than 8 hours of daylight per day. The amount of daylight I get affects my mood quite a bit, that’s why I love Berlin in summer with its long hours of daylight. But when exactly does it switch? And how stark is the impact of latitude for daylight hours. This got me interested.\nLet’s find out how many sunlight hours I get today!\n\nimport ephem\n\ndef daylight_hours(latitude, longitude, date):\n    observer = ephem.Observer()\n    observer.lat = str(latitude)\n    observer.lon = str(longitude)\n    observer.date = ephem.Date(date)\n    sun = ephem.Sun(observer)\n    try:\n        sunrise = observer.next_rising(sun).datetime()\n        sunset = observer.next_setting(sun).datetime()\n    except ephem.AlwaysUpError:\n        return 24.0  # Sun is always up (e.g., polar day)\n    except ephem.NeverUpError:\n        return 0.0   # Sun never rises (e.g., polar night)\n\n    if sunset &lt; sunrise:\n        sunset += timedelta(days=1)\n    daylight_duration = sunset - sunrise\n    hours_of_daylight = daylight_duration.total_seconds() / 3600\n\n    return hours_of_daylight\n\n# Example usage\nlatitude = 52.52   # Berlin latitude\nlongitude = 13.405 # Berlin longitude\ndate = '2024/01/05'\n\nsunlight_duration = daylight_hours(latitude, longitude, date)\nprint(\"Duration of Sunlight:\", sunlight_duration)\n\nDuration of Sunlight: 7.85817605\n\n\nIt would be great get this number also for other cities – and to look it up by city name directly\n\nimport requests\n\ndef get_lat_long(city_name):\n    url = f\"https://nominatim.openstreetmap.org/search?city={city_name}&format=json\"\n    headers = { \"User-Agent\": \"timeywhimey/1.0 (zaphod.beeblebrox@gmail.com)\" }\n    response = requests.get(url, headers=headers)\n    data = response.json()\n\n    if data:\n        latitude = data[0][\"lat\"]\n        longitude = data[0][\"lon\"]\n        return latitude, longitude\n    else:\n        return None, None\n\ncity = \"Berlin\"\nlatitude, longitude = get_lat_long(city)\nprint(\"Latitude:\", latitude, \"Longitude:\", longitude)\n\ncity = \"Berlin\"\ndate = '2024/01/05'\n\nlatitude, longitude = get_lat_long(city)\nsunlight_duration = daylight_hours(latitude, longitude, date)\nprint(\"Duration of Sunlight:\", sunlight_duration)\n\nLatitude: 52.510885 Longitude: 13.3989367\nDuration of Sunlight: 7.859723878055555\n\n\nNow we can do some plotting. How does the daylight hours change across the year? How does it do in different cities? Is there a time when it doesn’t matter where I am, because I get the same amount of sunlight hours on every latitude?\nFirst, we need the data in some format that is suitable.\n\nfrom datetime import datetime, timedelta\nimport pandas as pd\npd.set_option('display.precision', 1)\n\ndef generate_dates_for_year(year):\n    start_date = datetime(year, 3, 1)\n    end_date = datetime(year + 1, 4, 1)\n    \n    date_list = []\n    current_date = start_date\n    while current_date &lt;= end_date:\n        date_list.append(current_date.strftime('%Y/%m/%d'))\n        current_date += timedelta(days=1)\n    \n    return date_list\n\ndates = generate_dates_for_year(2024)\ncities = ['Shanghai', 'Berlin', 'Singapore', 'Buenos Aires', 'Wellington']\ndf = pd.DataFrame({'Date': dates})\nfor city in cities:\n    latitude, longitude = get_lat_long(city)\n    df[city] = df.Date.map(lambda date: daylight_hours(latitude, longitude, date))\n\ndf.head(5)\n\n\n\n\n\n\n\n\nDate\nShanghai\nBerlin\nSingapore\nBuenos Aires\nWellington\n\n\n\n\n0\n2024/03/01\n11.6\n10.9\n12.1\n12.8\n13.0\n\n\n1\n2024/03/02\n11.6\n11.0\n12.1\n12.8\n13.0\n\n\n2\n2024/03/03\n11.6\n11.1\n12.1\n12.7\n12.9\n\n\n3\n2024/03/04\n11.6\n11.1\n12.1\n12.7\n12.9\n\n\n4\n2024/03/05\n11.7\n11.2\n12.1\n12.7\n12.8\n\n\n\n\n\n\n\n\nimport altair as alt\n\n\ndf_long = df.melt(id_vars='Date', var_name='city', value_name='Hours of daylight')\nchart = alt.Chart(df_long).mark_line(color=\"grey\", size=1).encode(\n    x='Date:T', \n    y=alt.Y('Hours of daylight:Q', scale=alt.Scale(domain=[7, 18])),  # Limit y-axis range\n    detail='city:N',\n    strokeDash='city:N',\n).properties(\n    width=700,\n    height=600\n)\n\ndate_of_label = \"2024/06/20\"\ndf_left = df_long[df_long.Date == date_of_label]\ndf_left = df_left[df_left['city'].isin(['Berlin', 'Shanghai', 'Singapore'])]\ntext_chart = alt.Chart(df_left).mark_text(\n    align='center', dx=0, dy=-10,\n    font='IM Fell English',\n    fontSize=16    \n).encode(\n    x='Date:T',\n    y='Hours of daylight:Q',\n    text='city:N',\n)\n\ndate_of_label = \"2024/12/20\"\ndf_right = df_long[df_long.Date == date_of_label]\ndf_right = df_right[df_right['city'].isin(['Wellington', 'Buenos Aires'])]\ntext_chart2 = alt.Chart(df_right).mark_text(\n    align='center', dx=0, dy=-10,\n    font='IM Fell English',  # Specify the font here\n    fontSize=16     # You can also adjust the font size\n).encode(\n    x='Date:T',\n    y='Hours of daylight:Q',\n    text='city:N',\n)\n\n\n\nlayered_chart = alt.layer(chart, text_chart, text_chart2).resolve_scale(\n    y='shared'\n)\nlayered_chart.configure_view(\n    strokeWidth=0       # Remove border around the chart\n).configure_axis(\n    grid=False,        \n    domain=False,\n    labelFont='IM Fell English',\n    labelFontSize=14,\n    titleFontWeight='normal',\n    titleFont='IM Fell English',\n    titleFontSize=16,\n    ticks=False,\n).configure_axisY(\n    grid=True,\n).configure_text(\n    fontSize=16,\n    stroke='white',      # Outer color (shadow color)\n    strokeWidth=1,       # Width of the shadow\n    strokeOpacity=0.5,   # Opacity of the shadow\n    font='IM Fell English',  # Specify the font here\n).configure_legend(\n    disable=True\n).configure_text(\n    font='IM Fell English'\n)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Sidenotes for Quarto\n\n\n\n\n\n\n\n\n\n\n\nMar 19, 2025\n\n\n\n\n\n\n\nRangeplot in Altair\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2025\n\n\n\n\n\n\n\nDaylight hours\n\n\n\n\n\n\n\n\n\n\n\nJan 5, 2024\n\n\n\n\n\n\nNo matching items"
  }
]