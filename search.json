[
  {
    "objectID": "posts/hello_world/index.html",
    "href": "posts/hello_world/index.html",
    "title": "Hello world",
    "section": "",
    "text": "Lorem Ipsum."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Siegfried Gessulat's blog",
    "section": "",
    "text": "Rangeplot in Altair\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2025\n\n\n\n\n\n\n\nHello world\n\n\n\n\n\n\n\n\n\n\n\nFeb 7, 2025\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Google Scholar Profile"
  },
  {
    "objectID": "about.html#publications",
    "href": "about.html#publications",
    "title": "About",
    "section": "",
    "text": "Google Scholar Profile"
  },
  {
    "objectID": "posts/tufte_rangeplot/tufte_rangeplot.html",
    "href": "posts/tufte_rangeplot/tufte_rangeplot.html",
    "title": "Rangeplot in Altair",
    "section": "",
    "text": "Edward Tufte suggests to visually indicate the location of the max and min values in a scatterplot with the lines that demark the x- and y-axis of the plot. He calls this a rangeplot.\nThis post shows how to create a such a plot in Altair 5\nFirst, we create a random dataset.\n\nimport numpy as np\nimport pandas as pd\n\ndf = pd.DataFrame({\n    'x': np.random.randn(100),\n    'y': np.random.randn(100),\n    'category': np.random.randint(0, 2, 100),\n    'intensity': np.random.rand(100)\n})\n\nThen, we create a scatterplot and adjust the axes as recommended by Tufte. We remove grids and ticks, as is common in Tufte-style plots. As Altair’s default font size is rather small, we increase it.\n\nimport altair as alt\n\nalt.Chart(df, title=\"Rangeplot\").mark_point(filled=True).encode(\n    alt.X('x',\n      axis=alt.Axis(\n          offset=40, \n          grid=False, \n          ticks=False, \n          labelFontSize=12,\n          titleFontSize=16\n      ),\n      scale=alt.Scale(domain=[df.x.min(), df.x.max()], nice=False)\n    ),\n    alt.Y('y',\n      axis=alt.Axis(\n          offset=40, \n          grid=False, \n          ticks=False, \n          labelFontSize=12,\n          titleFontSize=16\n      ),\n      scale=alt.Scale(domain=[df.y.min(), df.y.max()], nice=False)\n    ),\n    opacity='intensity',\n    color=alt.Color('category:N')\n).properties(\n  height=300,\n  width=500\n).configure_view(\n    stroke=None,\n)\n\n\n\n\n\n\n\nThis was quite some styling for a single plot. To simplify this in the future, we can make our lives easier with - Factor out the min_max_scale. - Create a custom theme following Tufte’s advice on style. In addition we’ll use a font is similar to fonts he regularly uses. - Set a default size for plots (which can be overridden).\n\nfrom altair import Chart, X, Y, Color, Scale, theme\n\n@theme.register('tufte', enable=True)\ndef tufte():\n    font = \"EB Garamond\"\n    return {\n        'config': {\n            \"title\": {\n                'font': font,\n                'fontSize': 24\n            },\n            'view': {\n                'stroke': None,\n                'height': 300,\n                'width': 500\n            },\n            'mark': {'filled': True,},\n            'axis': {\n                'labelFontSize': 14,\n                'titleFontSize': 18,\n                'offset': 40,\n                'grid': False,\n                'ticks': False,\n                'labelFont': font,\n                'titleFont': font\n            },\n            'legend': { \n                'titleFont': font,\n                'labelFont': font,\n                'titleFontSize': 14,\n                'labelFontSize': 12\n            },\n            'scale': {\n                'nice': False\n            }\n        }\n    }\n\nmin_max_scale = lambda df, col: Scale(domain=[df[col].min(), df[col].max()])\n\nChart(df, title=\"Rangeplot\").mark_point().encode(\n    X('x', scale=min_max_scale(df, 'x')),\n    Y('y', scale=min_max_scale(df, 'y')),\n    color=Color('category:N'),\n    opacity='intensity'\n)"
  }
]